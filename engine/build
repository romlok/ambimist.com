#!/bin/sh

# Builds the site in the current repository

set -e

ENGINE_PATH="$(dirname "$0")"
SITE_PATH="$(readlink -f "$ENGINE_PATH/..")"
SRC_PATH="$SITE_PATH/src"

PAGE_TEMPLATE="$ENGINE_PATH/page.html"
NAV_TEMPLATE="$ENGINE_PATH/nav-item.html"

INDEX_TEMPLATE="$ENGINE_PATH/index-content.html"
INDEX_ITEM_TEMPLATE="$ENGINE_PATH/index-item.html"

RESERVED_NAMES="src|engine|README"

page_name() {
	basename "$1" | cut -d. -f1
}

reserved_name() {
	page_name "$1" \
		| grep -xE "$RESERVED_NAMES" >/dev/null
}

index_name() {
	[ "$(page_name "$1")" = "index" ]
}

# Check environment
PANDOC="$(which pandoc || echo -n)"

ext_to_converter() {
	case "$1" in
		"html")
			echo -n 'cat'
			;;

		"md")
			if [ -z "$PANDOC" ]; then
				echo "ERROR: Pandoc must be installed to use markdown" >&2
				return 1
			fi

			echo -n "$PANDOC -f markdown-smart -t html"
			;;

		*)
			echo "WARNING: Unknown file type $extension" >&2
			return 0
			;;
	esac
}


# Derive site-wide parameters
capitalise() {
	read val
	echo -n "$val" | head -c1 | tr [:lower:] [:upper:]
	echo -n "$val" | tail -c+2
}


echo "# Building site"

SITE_NAME="$(
	{
		git describe --tags --first-parent --abbrev=0 2>/dev/null \
		|| git symbolic-ref --short HEAD 2>/dev/null \
		|| echo -n "Unnamed website"
	} \
	| sed 's/-/ /g' \
	| capitalise
)"
echo "$SITE_NAME"


echo "## Prepopulating page template"

SITE_PAGE_TEMPLATE="$(mktemp)"
echo "$SITE_PAGE_TEMPLATE"

cat "$PAGE_TEMPLATE" \
	| sed -e "s/<SITE-NAME>/$SITE_NAME/g" \
	> "$SITE_PAGE_TEMPLATE"


echo "### Building main navigation"

build_pages_nav() {
	for page_file in "$SRC_PATH"/*; do
		reserved_name "$page_file" && continue
		index_name "$page_file" && continue

		name="$(page_name "$page_file")"
		url="/$name"
		title="$(echo "$name" | capitalise)"

		cat "$NAV_TEMPLATE" \
			| sed -e "s|<URL>|$url|g" \
				-e "s|<TITLE>|$title|g"
	done
}

build_pages_nav \
	| sed -i -e "/<PAGES-NAVIGATION>/ { r /dev/stdin" -e ';d};' \
		"$SITE_PAGE_TEMPLATE"


echo "## Removing previous files"
cd "$SITE_PATH"
for extant in *; do
	reserved_name "$extant" && continue

	rm -rfv "$extant"
done


echo "## Generating pages"

site_path() {
	source_path="$1"

	rel_path="$(echo "$source_path" | sed -e "s|^$SRC_PATH/\?||")"
	readlink -m "$SITE_PATH/$rel_path"
}

page_path() {
	source_file="$1"

	name="$(page_name "$source_file")"
	rel_path="$(dirname "$source_file" | sed -e "s|^$SRC_PATH/\?||")"

	if [ "index" = "$name" ]; then
		readlink -m "$SITE_PATH/$rel_path"
	else
		readlink -m "$SITE_PATH/$rel_path/$name"
	fi
}

build_file() (
	input_file="$1"

	reserved_name "$input_file" && return 0


	output_path="$(page_path "$input_file")"
	output_index="$output_path/index.html"
	
	rel_output_path="$(echo "$output_path" | sed "s|^$SITE_PATH||")"
	if index_name "$input_file"; then
		rel_output_path="$rel_output_path/index"
	fi
	echo "### $rel_output_path"

	mkdir -p "$output_path"

	extension="$(basename "$input_file" | cut -d. -f2)"
	converter="$(ext_to_converter "$extension")"

	if [ -n "$converter" ]; then
		pages_navigation="$(build_pages_nav)"
		cat "$input_file" \
			| $converter \
			| sed -e "/<PAGE-CONTENT>/ { r /dev/stdin" -e ';d};' \
				-e "s/<SITE-NAME>/$SITE_NAME/g" \
				"$SITE_PAGE_TEMPLATE" \
			> "$output_index"
	fi
)

build_dir_index_items() (
	source_path="$1"

	for source_file in "$source_path"/*; do
		reserved_name "$source_file" && continue

		output_path="$(page_path "$source_file")"
		url="$(echo "$output_path" | sed "s|^$SITE_PATH||")"
		title="$(basename "$output_path" | capitalise)"

		cat "$INDEX_ITEM_TEMPLATE" \
			| sed -e "s|<URL>|$url|g" \
				-e "s|<TITLE>|$title|g"
	done
)

build_dir_index() (
	source_path="$1"

	rel_path="$(echo "$source_path" | sed -e "s|^$SRC_PATH/\?||")"
	dir_name="$(basename "$rel_path" | capitalise)"
	output_path="$(site_path "$source_path")"

	rel_output_path="$(echo "$output_path" | sed "s|^$SITE_PATH||")"
	echo "### $rel_output_path/index"

	build_dir_index_items "$source_path" \
		| sed -e "/<INDEX-ITEMS>/ { r /dev/stdin" -e ';d};' \
			-e "s/<DIR-NAME>/$dir_name/g" \
			"$INDEX_TEMPLATE" \
		| sed -e "/<PAGE-CONTENT>/ { r /dev/stdin" -e ';d};' \
			-e "s/<SITE-NAME>/$SITE_NAME/g" \
			"$SITE_PAGE_TEMPLATE" \
		> "$output_path/index.html"
)

build_dir() (
	source_path="$1"
	indexed=""

	for source_file in "$source_path"/*; do
		if [ -d "$source_file" ]; then
			build_dir "$source_file"
		else
			if index_name "$source_file"; then
				indexed="yup"
			fi
			build_file "$source_file"
		fi
	done

	if [ -z "$indexed" ]; then
		build_dir_index "$source_path"
	fi
)

build_dir "$SRC_PATH"


echo "## Removing temporary files"
rm "$SITE_PAGE_TEMPLATE"
